//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(February27th_EntityFramework.CollegeEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets14c072b8ecfcf8f24e453f751e31f5356a13b454cdbf1d12578c38e961a2bcd6))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets14c072b8ecfcf8f24e453f751e31f5356a13b454cdbf1d12578c38e961a2bcd6 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "14c072b8ecfcf8f24e453f751e31f5356a13b454cdbf1d12578c38e961a2bcd6"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CollegeModelStoreContainer.Course")
            {
                return GetView0();
            }

            if (extentName == "CollegeModelStoreContainer.Enrollment")
            {
                return GetView1();
            }

            if (extentName == "CollegeModelStoreContainer.Instructor")
            {
                return GetView2();
            }

            if (extentName == "CollegeModelStoreContainer.Major")
            {
                return GetView3();
            }

            if (extentName == "CollegeModelStoreContainer.Section")
            {
                return GetView4();
            }

            if (extentName == "CollegeModelStoreContainer.Student")
            {
                return GetView5();
            }

            if (extentName == "CollegeEntities.Courses")
            {
                return GetView6();
            }

            if (extentName == "CollegeEntities.Enrollments")
            {
                return GetView7();
            }

            if (extentName == "CollegeEntities.Instructors")
            {
                return GetView8();
            }

            if (extentName == "CollegeEntities.Majors")
            {
                return GetView9();
            }

            if (extentName == "CollegeEntities.Sections")
            {
                return GetView10();
            }

            if (extentName == "CollegeEntities.Students")
            {
                return GetView11();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Course.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Course
        [CollegeModel.Store.Course](T1.Course_Id, T1.Course_Department, T1.Course_Name, T1.Course_Credits, T1.Course_Number)
    FROM (
        SELECT 
            T.Id AS Course_Id, 
            T.Department AS Course_Department, 
            T.Name AS Course_Name, 
            T.Credits AS Course_Credits, 
            T.Number AS Course_Number, 
            True AS _from0
        FROM CollegeEntities.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Enrollment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollment
        [CollegeModel.Store.Enrollment](T1.Enrollment_Id, T1.Enrollment_StudentID, T1.Enrollment_InstructorID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.Id AS Enrollment_Id, 
            T.StudentID AS Enrollment_StudentID, 
            T.InstructorID AS Enrollment_InstructorID, 
            T.Grade AS Enrollment_Grade, 
            True AS _from0
        FROM CollegeEntities.Enrollments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Instructor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instructor
        [CollegeModel.Store.Instructor](T1.Instructor_Id, T1.Instructor_Name, T1.Instructor_Phone, T1.Instructor_Office)
    FROM (
        SELECT 
            T.Id AS Instructor_Id, 
            T.Name AS Instructor_Name, 
            T.Phone AS Instructor_Phone, 
            T.Office AS Instructor_Office, 
            True AS _from0
        FROM CollegeEntities.Instructors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Major.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Major
        [CollegeModel.Store.Major](T1.Major_Id, T1.Major_Name, T1.Major_Type)
    FROM (
        SELECT 
            T.Id AS Major_Id, 
            T.Name AS Major_Name, 
            T.Type AS Major_Type, 
            True AS _from0
        FROM CollegeEntities.Majors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Section.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Section
        [CollegeModel.Store.Section](T1.Section_Id, T1.[Section.Course_Id], T1.Section_Days, T1.Section_Time, T1.[Section.Instructor_ID])
    FROM (
        SELECT 
            T.Id AS Section_Id, 
            T.Course_Id AS [Section.Course_Id], 
            T.Days AS Section_Days, 
            T.Time AS Section_Time, 
            T.Instructor_ID AS [Section.Instructor_ID], 
            True AS _from0
        FROM CollegeEntities.Sections AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeModelStoreContainer.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [CollegeModel.Store.Student](T1.Student_ID, T1.Student_UniqueID, T1.Student_Major, T1.Student_Name)
    FROM (
        SELECT 
            T.ID AS Student_ID, 
            T.UniqueID AS Student_UniqueID, 
            T.Major AS Student_Major, 
            T.Name AS Student_Name, 
            True AS _from0
        FROM CollegeEntities.Students AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [CollegeModel.Course](T1.Course_Id, T1.Course_Department, T1.Course_Name, T1.Course_Credits, T1.Course_Number)
    FROM (
        SELECT 
            T.Id AS Course_Id, 
            T.Department AS Course_Department, 
            T.Name AS Course_Name, 
            T.Credits AS Course_Credits, 
            T.Number AS Course_Number, 
            True AS _from0
        FROM CollegeModelStoreContainer.Course AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Enrollments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollments
        [CollegeModel.Enrollment](T1.Enrollment_Id, T1.Enrollment_StudentID, T1.Enrollment_InstructorID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.Id AS Enrollment_Id, 
            T.StudentID AS Enrollment_StudentID, 
            T.InstructorID AS Enrollment_InstructorID, 
            T.Grade AS Enrollment_Grade, 
            True AS _from0
        FROM CollegeModelStoreContainer.Enrollment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Instructors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Instructors
        [CollegeModel.Instructor](T1.Instructor_Id, T1.Instructor_Name, T1.Instructor_Phone, T1.Instructor_Office)
    FROM (
        SELECT 
            T.Id AS Instructor_Id, 
            T.Name AS Instructor_Name, 
            T.Phone AS Instructor_Phone, 
            T.Office AS Instructor_Office, 
            True AS _from0
        FROM CollegeModelStoreContainer.Instructor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Majors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Majors
        [CollegeModel.Major](T1.Major_Id, T1.Major_Name, T1.Major_Type)
    FROM (
        SELECT 
            T.Id AS Major_Id, 
            T.Name AS Major_Name, 
            T.Type AS Major_Type, 
            True AS _from0
        FROM CollegeModelStoreContainer.Major AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Sections.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sections
        [CollegeModel.Section](T1.Section_Id, T1.[Section.Course_Id], T1.Section_Days, T1.Section_Time, T1.[Section.Instructor_ID])
    FROM (
        SELECT 
            T.Id AS Section_Id, 
            T.Course_Id AS [Section.Course_Id], 
            T.Days AS Section_Days, 
            T.Time AS Section_Time, 
            T.Instructor_ID AS [Section.Instructor_ID], 
            True AS _from0
        FROM CollegeModelStoreContainer.Section AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CollegeEntities.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [CollegeModel.Student](T1.Student_UniqueID, T1.Student_Major, T1.Student_Name, T1.Student_ID)
    FROM (
        SELECT 
            T.UniqueID AS Student_UniqueID, 
            T.Major AS Student_Major, 
            T.Name AS Student_Name, 
            T.ID AS Student_ID, 
            True AS _from0
        FROM CollegeModelStoreContainer.Student AS T
    ) AS T1");
        }
    }
}
